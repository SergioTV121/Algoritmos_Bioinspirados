# -*- coding: utf-8 -*-
"""Automatas_Segundo_Orden.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tUNV9xJVsMOgUd3joSXkZl-kw-PMcONz
"""

import cv2
import numpy as np
from IPython import display as display
import ipywidgets as ipw
import PIL
from io import BytesIO
from random import random


N=100

cells0=N*[0]
cells1=N*[0]
cells2=N*[0]
def xor(x, y):
    return bool((x and not y) or (not x and y))

for i in range(N):
  cells1[i]= 0 if random()>0.5 else 1

rule=[0,0,0,1,0,0,1,0]  #W18
rule=rule[::-1]

def apply_rule(left,center,right):
  global rule

  return rule[right+2*center+4*left]


def iteration():
  global cells0,cells1,N
  x=0

  for i in range(1,N-1):

    cells2[i]=xor(apply_rule(cells1[i-1],cells1[i],cells1[i+1]), cells0[i])

  cells0[:]=cells1[:]
  cells1[:]=cells2[:]
  
  
  




x0=0
y0=0
maxX=500
maxY=500
color=(255,255,255)
margin=1
stride = (maxX - 2*margin)/N


def graph_cells(img,cells):
  global x0,y0,maxX,maxY,margin,color,stride,N
  r=5
  for i in range(N):
    if cells[i]:
      start=(int(x0+stride*i+margin),int(y0+margin))
      end=(int(x0+stride*(i+1)-margin), int(y0+stride-margin))
      cv2.rectangle(img,start,end,color,-1)


wIm = ipw.Image()
display.display(wIm)


img = np.zeros((350, 350, 3), dtype="uint8")

graph_cells(img,cells1)
y0+=stride

while y0<=maxY:
  iteration()
  graph_cells(img,cells0)
  y0+=stride

pilIm = PIL.Image.fromarray(img, mode="RGB")
with BytesIO() as fOut:
    pilIm.save(fOut, format="png")
    byPng = fOut.getvalue()
      
# set the png bytes as the image value; 
# this updates the image in the browser.
wIm.value=byPng