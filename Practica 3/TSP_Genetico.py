# -*- coding: utf-8 -*-
"""AG2-TSP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jTgbYsBEMbrDnSoCmeX8jOI13uDNZgv_
"""

import numpy
import ipywidgets as widgets

import math
import random
import time
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from IPython import display as display

from functools import cmp_to_key

import numpy as np


#Defino la matriz de distancias entre ciudades
M=2*numpy.ones([11,11])
M[1][3]=1; M[3][5]=1; M[5][7]=1; M[7][9]=1;
M[9][2]=1; M[2][4]=1; M[4][6]=1; M[6][8]=1;
M[8][10]=1



def create_button():
  button = widgets.Button(
    description='Next Generation',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Next Generation',
    icon='check' # (FontAwesome names without the `fa-` prefix)
  )
  return button


def nextgeneration(b):
    global cromosomas, F0
    display.clear_output(wait=True)
    display.display(button)

    cromosomas=modificarCromosoma(cromosomas,F0)
    F0=evaluarCromosoma(cromosomas)

    print( "Best solution so far:\n")
    print("Recorrido: ",cromosomas)
    print("Fitness: ",F0)
    print("Distancia recorrida: ",sum(F0))
                                                                    

cromosomas=[]   #Declarar vector F0
F0=[]   #Vector de ajuste
elitismo=0



def crearCromosomas():
  global cromosomas
  cromosomas=[1,2,3,4,5,6,7,8,9,10]
  random.shuffle(cromosomas)



def evaluarCromosoma(cromosoma):    #Fitness dado por la distancia recorrida
  F1=[]
  global elitismo
  for g in range(9):
    F1.append(M[cromosoma[g]][cromosoma[g+1]])

  if(F1[0]==1 and F1[1]==1):
    elitismo=3  #Elitismo maximo de 30%
  elif(F1[0]==1):
    elitismo=2  #Elitismo de 20%
  return F1  



def modificarCromosoma(cromosoma,F):    #Insertar ciudad en otra posicion
  global elitismo
  j=0
 
  c=cromosoma[:]    #Copia de cromosoma
  for i in range(elitismo,8):  #Recorro mi vector de ajuste
    if F[i]==1:  #Si la distancia es minima
      a=c.pop(i)   #Retiro la ciudad A
      b=c.pop(i) #Retiro la ciudad B (i no aumenta porque se quito un elemento)
      c.insert(elitismo,b)    #Los coloco al inicio de la lista
      c.insert(elitismo,a)
      if(j<4):
        j+=2
        
  genoma=c.pop(random.randrange(elitismo+j,10))   #Retiro un elemento aleatorio
  c.insert(random.randrange(elitismo+j,10),genoma)   #Inserto el elemento en otra posicion aleatoria
  return c


crearCromosomas()  #Genero el recorrido de ciudades

F0=evaluarCromosoma(cromosomas)

print("Recorrido: ",cromosomas)
print("Fitness: ",F0)
print("Distancia recorrida: ",sum(F0))

button=create_button()
button.on_click(nextgeneration)
display.display(button)